eval.blocksetup <- function(dat=minidata, k=5,b=21, key){#
	runtime <- as.numeric(system.time(mapping <- block_setup_v2(dat, b=b, k=k))[3] )#
	recall<- confusion.from.blocking (blocking=mapping,true_ids=key,recall.only=TRUE)[[1]]#
	return(data.frame(recall, runtime))#
}
rl_data_500_b26 <- adply(1:5, .margins=1, .fun = eval.blocksetup,  dat=minidata, b=26, .expand=F,key=identity.RLdata10000)
library(plyr)#
library(RecordLinkage)#
data(RLdata500)#
minidata <- RLdata500[-c(2,4)]#
#The command #
rl_data_500_b26 <- adply(1:5, .margins=1, .fun = eval.blocksetup,  dat=minidata, b=26, .expand=F,key=identity.RLdata500)
install.packages("digest")
library(digest)
rl_data_500_b26 <- adply(1:5, .margins=1, .fun = eval.blocksetup,  dat=minidata, b=26, .expand=F,key=identity.RLdata500)
library(digest)
rl_data_500_b26 <- adply(1:5, .margins=1, .fun = eval.blocksetup,  dat=minidata, b=26, .expand=F,key=identity.RLdata500)
?digest()
a<-1/2
b<-10^2*a
?seq()
theta <- seq(0,100,by=100)
gam <- gamma(theta,a,b)
gam <- rgamma(theta,a,b)
plot(gam)
theta <- seq(0,100,by=1)
gam <- rgamma(theta,a,b)
plot(gam)
head(rgamma)
head(gam)
plot(density(gam))
a <- 10
b <- 100
a/(a+b)
a<-1
b<-100
a/(a+b)
gam <- rgamma(theta,a,b)
plot(density(gam))
170*100
29*100
library(xtable)
sampleTrunGamma <- function(t, a, b){#
  # This function samples from a truncated gamma with#
  # truncation (t, infty), shape a, and rate b#
  p0 <- pgamma(t, shape = a, rate = b)#
  x <- runif(1, min = p0, max = 1)#
  y <- qgamma(x, shape = a, rate = b)#
  return(y)#
 }
sampleGibbs <- function(z, c, n.iter, init.theta, init.miss, r, a, b, burnin = 1){#
  # this function is a Gibbs sampler#
  # z is the fully observe data#
  # c is censored data#
  # n.iter is number of iterations#
  # init.theta and init.miss are initial values for sampler#
  # r,a, and b are parameters#
  # burnin is number of iterations to use as burnin#
  z.sum <- sum(z)#
  m <- length(c)#
  n <- length(z) + m#
  miss.vals <- init.miss #
  res <- matrix(NA, nrow = n.iter, ncol = 1 + m)#
  for (i in 1:n.iter){#
    var.sum <- z.sum + sum(miss.vals)#
    theta <- rgamma(1, shape = a + n*r, rate = b + var.sum)#
    miss.vals <- sapply(c, function(x) {sampleTrunGamma(x, r, theta)})#
    res[i,] <- c(theta, miss.vals)#
  } #
  return(res[burnin:n.iter,])#
}
# set parameter values#
r <- 10#
a <- 1#
b <- 1#
z <- c(3.4,2.9,1.4,3.2,1.8,4.6,2.8)#
c <- c(1.2,1.7,2.0,1.4,0.6)#
n.iter <- 10000#
init.theta <- 1#
init.missing <- rgamma(length(c), shape = r, rate = init.theta)#
# run sampler#
res <- sampleGibbs(z, c, n.iter, init.theta, init.missing, r, a, b)
plot(1:n.iter, res[,1], pch = 16, cex = .35,#
     xlab = "Iteration", ylab = expression(theta),#
     main = expression(paste("Traceplot of ", theta)))
missing.index <- c(3,8,9,10,12)#
for (ind in missing.index){#
  pdf(file = paste0(ind, "_trace.pdf"))#
  x.lab <- bquote(z[.(ind)])#
  plot(1:n.iter, res[,which(missing.index == ind)], pch = 16, cex = .35,#
       xlab = "Iteration", ylab = x.lab,#
       main = bquote(paste("Traceplot of ", .(x.lab))))
}
missing.index <- c(3,8,9,10,12)#
for (ind in missing.index){#
  x.lab <- bquote(z[.(ind)])#
  plot(1:n.iter, res[,which(missing.index == ind)], pch = 16, cex = .35,#
       xlab = "Iteration", ylab = x.lab,#
       main = bquote(paste("Traceplot of ", .(x.lab)))) #
       }
dev.off()
missing.index <- c(3,8,9,10,12)#
for (ind in missing.index){#
  x.lab <- bquote(z[.(ind)])#
  plot(1:n.iter, res[,which(missing.index == ind)], pch = 16, cex = .35,#
       xlab = "Iteration", ylab = x.lab,#
       main = bquote(paste("Traceplot of ", .(x.lab)))) #
       }
missing.index <- c(3,8,9,10,12)
par(mfrow=c(3,2))
for (ind in missing.index){#
  x.lab <- bquote(z[.(ind)])#
  plot(1:n.iter, res[,which(missing.index == ind)], pch = 16, cex = .35,#
       xlab = "Iteration", ylab = x.lab,#
       main = bquote(paste("Traceplot of ", .(x.lab)))) #
       }
missing.index <- c(3,8,9,10,12)
par(mfrow=c(3,2))
par(mfrow=c(3,2))#
missing.index <- c(3,8,9,10,12)#
for (ind in missing.index){#
  pdf(file = paste0(ind, "_trace.pdf"))#
  x.lab <- bquote(z[.(ind)])#
  plot(1:n.iter, res[,which(missing.index == ind)], pch = 16, cex = .35,#
       xlab = "Iteration", ylab = x.lab,#
       main = bquote(paste("Traceplot of ", .(x.lab))))#
       }
plot(density(res[,1]), xlab = expression(theta), #
     main = expression(paste("Density of ", theta)))#
abline(v = mean(res[,1]), col = "red")#
plot(density(res[,4]), xlab = expression(z[9]),#
     main = expression(paste("Density of ", z[9])))#
abline(v = mean(res[,4]), col = "red")
plot(density(res[,1]), xlab = expression(theta), #
     main = expression(paste("Density of ", theta)))#
abline(v = mean(res[,1]), col = "red")
plot(density(res[,4]), xlab = expression(z[9]),#
     main = expression(paste("Density of ", z[9])))#
abline(v = mean(res[,4]), col = "red")
run.avg <- apply(res, 2, cumsum)/(1:n.iter)#
#
plot(1:n.iter, run.avg[,1], type = "l",#
     xlab = "Iteration", ylab = expression(theta),#
     main = expression(paste("Running Average Plot of ", theta)))
par(mfrow=c(3,2))
missing.index <- c(3,8,9,10,12)
for (ind in missing.index){#
  x.lab <- bquote(z[.(ind)])#
  plot(1:n.iter, res[,which(missing.index == ind)], pch = 16, cex = .35,#
       xlab = "Iteration", ylab = x.lab,#
       main = bquote(paste("Traceplot of ", .(x.lab))))#
       }
par(mfrow=c(3,2))     #
missing.index <- c(3,8,9,10,12)#
for (ind in missing.index){#
  x.lab <- bquote(z[.(ind)])#
  plot(1:n.iter, run.avg[,which(missing.index == ind)], type = "l",#
       xlab = "Iteration", ylab = x.lab,#
       main = bquote(paste("Running Average Plot of ", .(x.lab)))) #
}
under.exam.one <- c(99,98,89.75,99,75.75,93,90,65,90,100,100,94.75,87.5,96.75,82.50,99,93,89,87,9092,81.50,98,100,80,94,99,9885,9198,99)
length(under.exam.one)
underName <- c("Bunuk.Erik", "Amy.Chen", "Chen.Carolyn", "Cristali.Irina", "Dineshkumar.Shakira", "Feder.Ben", "Hu.McCourt", "Hu.Shuhao", "Huang.Howard", "Huang.Sherry", "Jacob.Eidan", "Jiang.Brian", "Jiang.Debra", "Levine.Daniel", "Lin.Vincent", "Malone.Alexis", "Rappleye.Rob", "Ratliff.Elizabeth", "Sampson.Mark", "Shulman.Jake", "Sibley.Sarah", "Sivakumar.Anupriya", "Hillary.Song","Sriram.Vivek", "Siles.Tim", "Wang.Elbert", "Xi.Yue", "Yang.Eddie", "Yang.Steven", "Zhuang.Bihan", "Zimmer.Erik", "Zuo.Lin")
length(under.exam.one)
under.exam.two <- c(68,72,75.5,78,78,0,80,67,80.5,74.5,78,78,81,48.5,78,83,79,7960,69.5,77,63.5,75,82,81,67.5,8078,79,68,83,62,82,71,82,84,81,78,75,82,69,72,84,80,84,78,50,78,81,73,83,80)/85
length(under.exam.two)
under.exam.two <- c(68,72,76,78,78,0,80,67,80.5,74.5,78,78,81,48.5,78,83,79,7960,69.5,77,64,75,82,81,68,80,78,79,68,83,62,82,71,82,84,81,78,75,82,69,72,84,80,84,78,50,78,81,73,83,80)/85
length(under.exam.two)
under.exam.two <- c(72,78,0,80,67,78,81,48.5,78,79,60,69.5,77,82,67.5,83,62,71,82,84,74,81,78,75,84,80,84,78,73,83,80)/85
length(under.exam.two)
under.exam.two <- c(72,78,0,80,67,78,81,48.5,78,79,60,69.5,77,82,67.5,77,83,62,71,82,84,74,81,78,75,84,80,84,78,73,83,80)/85
length(under.exam.two)
grad.exam.two <- c(68,75.5,78,80.5,80.5,74.5,78,83,79,63.5,75,81,80,78,79,68,82,82,69,72,50,78,81)/85
length(grad.exam.two)
gradName <- c("Bent.Brinnae", "Cao.Wenjia", "Charaz.Pawel", "Draelos.Rachel", " Fan.Yaoyao", "Gao.An", "Huang.Jiayi", "Isaev.Dimitri", "Lan.Zhao", "LeBarbencho.Claire","Li.Weiye","Liu.Lily","Majka.Michal","Manzella.Kirean","  McDonald.Kelsey", "Redington.Emily", "Tran.Trung", "Tuleubayev.Adikhan", "Turpin.Kyle", "Yuan.Jiahe", "Zeng.Zijian", "Zhou.Xiaoyan")
length(gradName)
grad.exam.one <- c(92.5, 97.75, 94, 96.75,97.75,96.75,100,98,91.75,98,94.75,98.75,73.5,75.5,80.5,96,97.75,78.5,99,98.75,97.5,98.75)
length(grad.exam.one)
625/2
mu0 <- c(50,50)#
L0 <- matrix <- c(625,312.5,312.5,625,nrow=2,ncol=2)#
nu0 <- 4#
S0 <- L0
for(s in 1:1000) { #
###update theta Ln< solve ( solve (L0) + n⇤solve (Sigma) ) mun< Ln%⇤%( solve(L0)%⇤%mu0 + n⇤solve(Sigma)%⇤%ybar ) theta< rmvnorm(1 ,mun,Ln) #
### #
###update Sigma Sn< S0 + ( t(Y) c(theta) )%⇤%t( t(Y) c(theta) ) Sigma< solve( rwish(1, nu0+n, solve(Sn)) ) #
### #
### save results THETA< rbind(THETA,theta) ; SIGMA< rbind(SIGMA,c(Sigma)) ### #
}
L0 <- matrix(c(625,312.5,312.5,625,nrow=2,ncol=2))
L0
matrix(c(1,1,1,1),nrow=2)
n< dim(Y)[1] ; p< dim(Y)[2]
Y <- structure(list(glu = c(86L, 195L, 77L, NA, 107L, 97L, NA, 193L, #
142L, 128L, 137L, 154L, 189L, 92L, 86L, 99L, 109L, NA, 149L, #
139L, NA, 100L, 83L, 101L, 87L, 164L, 99L, 140L, 108L, 110L, #
79L, 148L, 121L, 158L, 105L, 145L, 79L, 71L, 102L, 119L, 176L, #
97L, 129L, 97L, 86L, 125L, 123L, 92L, 171L, 199L, 116L, 83L, #
154L, 114L, 106L, 127L, 124L, 109L, 123L, 167L, NA, 96L, 129L, #
92L, 109L, 139L, 134L, 106L, 131L, 135L, 158L, 112L, 181L, 121L, #
168L, 144L, 101L, 96L, 107L, NA, 100L, 154L, 125L, 125L, 122L, #
114L, 115L, 114L, 115L, 130L, 79L, 112L, 150L, 91L, 100L, 140L, #
110L, 94L, 84L, 148L, 61L, 117L, 99L, NA, 154L, 103L, 111L, 124L, #
NA, 81L, NA, 116L, 103L, 124L, 71L, 137L, 112L, 148L, 136L, 145L, #
NA, 107L, 151L, 97L, 144L, 112L, 99L, 109L, 120L, 187L, 129L, #
179L, 80L, 105L, NA, 95L, 99L, 137L, NA, 100L, 167L, 180L, 122L, #
90L, 120L, 154L, 56L, 177L, 124L, 85L, 88L, 152L, 198L, 188L, #
139L, 168L, 197L, 142L, 126L, 158L, 130L, 100L, 164L, 95L, 122L, #
85L, 151L, 144L, 111L, 107L, 115L, 105L, 194L, 184L, 95L, 124L, #
111L, 137L, 57L, NA, 95L, 140L, 117L, 100L, 123L, 138L, 100L, #
175L, NA, 133L, 119L, 155L, 128L, NA, 140L, 141L, 129L, 106L, #
118L, 155L), bp = c(68L, 70L, 82L, 76L, 60L, 76L, 58L, 50L, 80L, #
78L, NA, 78L, 60L, NA, 66L, 76L, 60L, NA, NA, 62L, 70L, 66L, #
86L, 64L, NA, 84L, 58L, 65L, 72L, 74L, 60L, 66L, 66L, 64L, 80L, #
82L, 80L, 48L, 86L, 66L, 90L, 68L, NA, 64L, 68L, 60L, 74L, 76L, #
72L, NA, 74L, NA, 78L, 66L, 70L, 88L, 74L, 38L, 48L, NA, 84L, #
64L, 76L, 62L, 60L, 80L, 70L, 54L, 66L, 94L, 84L, 74L, 68L, 70L, #
88L, 82L, 58L, 68L, 62L, 78L, 64L, 72L, 78L, 70L, 76L, 68L, 70L, #
76L, 64L, 60L, 75L, 78L, NA, 54L, 72L, 82L, 76L, 76L, 50L, NA, #
82L, 62L, 80L, 82L, 62L, NA, 64L, 70L, 74L, 74L, 110L, 72L, 66L, #
76L, 78L, 84L, 82L, 60L, NA, 80L, 56L, 72L, 70L, NA, 82L, NA, #
52L, 56L, 80L, 68L, NA, 95L, 66L, 58L, 68L, 80L, 72L, 68L, 70L, #
NA, NA, 90L, 70L, 62L, 70L, 78L, 56L, 60L, 80L, 55L, 74L, 78L, #
66L, 82L, NA, 88L, 70L, 82L, 74L, 76L, 78L, 54L, 82L, 60L, 52L, #
58L, 90L, 72L, 90L, 68L, 60L, 72L, NA, 78L, 85L, 70L, 62L, 90L, #
80L, 74L, 54L, 85L, 66L, NA, 70L, 60L, 78L, 62L, 52L, NA, 64L, #
84L, NA, 68L, 74L, 58L, 68L, 70L, 58L, 62L), skin = c(28L, 33L, #
NA, 43L, NA, 27L, 31L, 16L, 15L, NA, NA, 30L, 23L, 7L, 52L, 15L, #
8L, 33L, 29L, 17L, 16L, 29L, 19L, 17L, 34L, 21L, 10L, NA, 43L, #
29L, NA, 25L, 30L, 13L, 45L, 19L, 25L, 18L, 17L, NA, 34L, 21L, #
12L, 19L, 32L, 20L, 40L, NA, 33L, 43L, NA, 23L, 32L, 36L, 28L, #
11L, 36L, NA, 32L, 46L, 33L, 27L, 28L, 32L, 27L, NA, 23L, 21L, #
40L, 46L, 41L, NA, 36L, 32L, 29L, 46L, 17L, 13L, 13L, 17L, 23L, #
29L, 31L, NA, 27L, 22L, 30L, 17L, 22L, 23L, 30L, NA, 29L, 25L, #
12L, 43L, 20L, 18L, 23L, 48L, 28L, 12L, 11L, 31L, 31L, NA, 39L, #
20L, 22L, 41L, 31L, 12L, 32L, 24L, 50L, 27L, 32L, 27L, 50L, 46L, #
11L, 30L, 40L, 40L, 26L, NA, 15L, 21L, NA, NA, 49L, 31L, 30L, #
40L, 15L, 45L, 17L, 14L, 15L, 60L, 17L, NA, 27L, 12L, 30L, 41L, #
NA, 29L, 33L, 20L, 40L, 34L, 32L, NA, 35L, 42L, 99L, 18L, 38L, #
36L, 23L, 28L, 43L, 32L, NA, 22L, 46L, 27L, 12L, NA, 39L, 29L, #
28L, 39L, 25L, 33L, 13L, 41L, 37L, 35L, 14L, NA, 31L, 40L, 44L, #
35L, 25L, 30L, NA, 28L, 18L, 44L, 45L, 22L, 26L, 34L, 49L, 37L, #
36L, 26L), bmi = c(30.2, NA, 35.8, 47.9, NA, NA, 34.3, 25.9, #
NA, 43.3, NA, 30.9, 30.1, 27.6, 41.3, 23.2, 25.4, 36.6, 29.3, #
22.1, 20.4, 32, 29.3, 21, 37.6, 30.8, 25.4, 42.6, 36.1, NA, 43.5, #
32.5, 34.3, 31.2, 33.7, 22.2, 25.4, 20.4, 29.3, 38.8, NA, 27.2, #
NA, 18.2, 35.8, 33.8, 34.1, 24.2, 33.3, NA, 26.3, 32.2, 32.4, #
38.1, 34.2, 34.5, 27.8, 23.1, 42.1, 37.6, 35.5, 33.2, 35.9, 32, #
25, 31.6, NA, 30.9, 34.3, 40.6, 39.4, 31.6, 30.1, 39.1, 35, 46.1, #
24.2, 21.1, 22.9, 26.5, 29.7, 31.3, 27.6, 31.1, 35.9, 28.7, 34.6, #
23.8, 30.8, NA, 32, 39.4, 35.2, 25.2, 25.3, 39.2, 28.4, 31.6, #
NA, 37.6, NA, NA, 19.3, 34.2, 32.8, 37.7, 34.2, 27.4, NA, 46.3, #
28.5, 22.1, 39.1, 28.7, 33.2, 27.3, 34.2, 30.9, 37.4, 37.9, 22.5, #
30.8, NA, 38.1, 32, 38.4, 24.6, 25.2, 38.9, 37.7, 36.4, 34.2, #
26.2, 34.9, 30.9, 36.5, 25.6, 24.8, 18.2, 46.8, 23.4, 36.5, 36.8, #
27.2, 42.9, 46.1, 24.2, 34.6, 33.2, 24.4, 35.3, NA, 41.3, 32, #
28.6, 38.2, 34.7, 24.7, NA, 31.6, 28.4, 37.8, 32.8, 35.4, 36.2, #
27.8, 42.1, 33.9, 28.4, 26.5, 33.7, 36.9, 35.9, NA, 37.4, 25.5, #
24, 32, 32.8, NA, NA, 37.4, 30.8, 39.4, 33.1, 34.6, 36.6, 33.6, #
27.8, 32.8, 34.9, 38.7, NA, 34.1, 24.1, 25.4, 38.5, 39.4, 33.3, #
34)), .Names = c("glu", "bp", "skin", "bmi"), row.names = c(NA, #
200L), class = "data.frame")
n< dim(Y)[1] ; p< dim(Y)[2]
Y
n<- dim(Y)[1]
p< dim(Y)[2]
p = dim(Y)[2]
n
p
mu0= c (120 ,64 ,26 ,26)
mu0 <- c(120,64,26,26)
sd0 < mu0/2
sd0 <- mu0/2
L0 <- matrix(0.1, p,p)
L0
25-13
63.5+12
160*6
library(RecordLinkage)
data(RLdata500)
data <- RLdata500
library(italy)
?italy()
data <- italy
head(italy08)
head(italy10)
library(RLdata)
install.packages(RLdata)
head(RLdata500)
head(italy08)
head(italy10)
dim(Rldata500)
dim(data)
head(identity.RLdata500)
table(identity.RLdata500)
hist(table(identity.RLdata500))
?which()
which(data == identity.RLdata500)
table(which(data == identity.RLdata500))
data <- RLdata500[-(2,4)]
data <- RLdata500[-c(2,4)]
head(data)
1-0.097
1-0.047
library(RecordLinkage)
head(RLdata500)
load(RLdata500)
data(RLdata500)
head(RLdata500)
head(identity.RLdata500)
library(blink)
?blink()
28.99*&
28.99*7
.01*10000
Library/Containers/com.apple.mail/Data/Library/Mail Downloads/7E3E9337-DA71-4413-81AB-C482A82F3912/dataPoland.Rdata
load('~/Desktop/dataPoland.Rdata')
head(dataPoland)
head(province)
ls()
attach(dataPoland)
head(province)
head(PROVINCE)
PROVINCE
table(PROVINCE)
names(dataPoland)
table(SUBDREGION58)
library(RecordLinkage)
data(RLdata500)
data <- RLdata500
length(unique(identity.RLdata500))
length
length(data)
data <- RLdata500
length(RLdata500)
dim(RLdata500)
450/500
5*10^4
50000/60
10^4
50000/3600
50000/(60*60)
10^4/(60*60)
require(RecordLinkage)#
data("RLdata10000")#
knitr::kable(head(RLdata10000))
fields <- c("fname_c1", "lname_c1", "by", "bm", "bd")#
string.fields <- c("fname_c1", "lname_c1")#
#
file.start <- c(1,4000,7000)
args <- commandArgs(T)#
prior.alpha <- as.numeric(args[1])#
prior.beta <- as.numeric(args[2])
pop.size <- nrow(RLdata10000)
string.steepness <- as.numeric(args[3])
init.state <- "random"
sampler = "collapsed_gibbs"
num.chains <- 1
require(eber)
records <- as.matrix(RLdata10000) # eber doesn't accept dataframes yet
num.iter <- 10
out <- eber::eber(records, fields, string.fields, file.start, num.iter, #
                  prior.alpha, prior.beta, pop.size = pop.size, #
                  init.state = init.state, sampler = sampler, #
                  num.chains = num.chains, string.steepness = string.steepness)
require(parallel)
out <- eber::eber(records, fields, string.fields, file.start, num.iter, #
                  prior.alpha, prior.beta, pop.size = pop.size, #
                  init.state = init.state, sampler = sampler, #
                  num.chains = num.chains, string.steepness = string.steepness)
RLdata10000.R 1 50 5
Rscript run-eber-RLdata10000.R 1 50 5
out(1,50,5)
eber(1,50,5)
require(RecordLinkage)#
require(parallel)#
data("RLdata10000")#
knitr::kable(head(RLdata10000))
fields <- c("fname_c1", "lname_c1", "by", "bm", "bd")#
string.fields <- c("fname_c1", "lname_c1")
file.start <- c(1,4000,7000)#
#
#Distortion hyperparameters#
args <- commandArgs(T)#
prior.alpha <- as.numeric(args[1])#
prior.beta <- as.numeric(args[2])
pop.size <- nrow(RLdata10000)#
#
string.steepness <- as.numeric(args[3])#
#
init.state <- "random"#
#
sampler = "collapsed_gibbs"#
#
num.chains <- 1
#Run eber#
require(eber)#
records <- as.matrix(RLdata10000) # eber doesn't accept dataframes yet#
num.iter <- 10
out <- eber::eber(records, fields, string.fields, file.start, num.iter, #
                  prior.alpha, prior.beta, pop.size = pop.size, #
                  init.state = init.state, sampler = sampler, #
                  num.chains = num.chains, string.steepness = string.steepness)
25+10+45
sqrt(14)
sqrt(21)
sqrt(49)
sqrt(4)
mean(4)
mean(c(1,2,4,5))
simple.statistics <- function(c(my.data)) {#
mean <- mean(my.data)#
variance <- var(my.data)#
return(c(mean,variance))#
}
simple.statistics <- function(c(my.data)) {#
mean <- mean(my.data)#
variance <- var(my.data)#
return(c(mean,variance))#
}
var(4)
mean(4)
var(10)
?var()
var(c(1,2,3))
mean(c(1,2,3))
?var()
simple.statistics <- function(my.data) {#
mean <- mean(my.data)#
variance <- var(my.data)#
return(c(mean,variance))#
}
simple.statistics(my.data = c(1,2,3,4))
simple.statistics(my.data = c(2,2,2,2))
records <- read.csv("records.csv",sep="|")#
matchHRDAG <- read.csv("matching-results.csv",sep="|")#
#
records <- records[records$dataset=="UN-TRC",]#records$dataset=="UN-TRC"|#
matchHRDAG <- matchHRDAG[matchHRDAG$dataset=="UN-TRC",]#
records$dataset <- NULL#
#
# drop fields that don't provide info#
records$dataset <- NULL#
records$sex <- NULL#
records$ismale  <- NULL#
records$isfemale <- NULL#
records$perp1  <- NULL#
records$perp2  <- NULL#
records$perp3  <- NULL#
records$perp4  <- NULL#
records$perpstr <- NULL#
records$dataset <- NULL#
records$newviol  <- NULL#
records$violation <- NULL#
records$perptr <- NULL#
records$newperp <- NULL#
records$placestr <- NULL#
records$date <- NULL#
#
# standardize NA#
records$year [records$year ==0] <- NA#
records$month  [records$month ==0] <- NA#
records$day [records$day ==0] <- NA#
records$muni [records$muni =="NOT FOUND"] <- NA#
records$firstname [records$firstname == ""] <- NA#
records$lastname [records$lastname == ""] <- NA#
#
records$fullname <- NULL#
#
# merge with the IDs from the DuDe run by Amelia Hoover Green - HRDAG#
records <- merge(records,matchHRDAG, by="record_id")#
#
# Keep only records containing first and last name, and department #
# Some groups of records without first name seem to correspond to families killed the same day, in the same place#
#
records <- records[!is.na(records$firstname),]#
records <- records[!is.na(records$lastname),]#
records <- records[records$dept!="Unknown",]#
#
# firstname and lastname shouldn't contain numbers#
# replace 0 by O, 3 and 8 by B, ! and 1 by I, 6 by G, 2 by Z#
#
records$lastname <- gsub("0","O",records$lastname)#
records$firstname <- gsub("0","O",records$firstname)#
records$lastname <- gsub("3","B",records$lastname)#
records$firstname <- gsub("3","B",records$firstname)#
records$lastname <- gsub("8","B",records$lastname)#
records$firstname <- gsub("8","B",records$firstname)#
records$lastname <- gsub("!","I",records$lastname)#
records$firstname <- gsub("!","I",records$firstname)#
records$lastname <- gsub("1","I",records$lastname)#
records$firstname <- gsub("1","I",records$firstname)#
records$lastname <- gsub("6","G",records$lastname)#
records$firstname <- gsub("6","G",records$firstname)#
records$lastname <- gsub("2","Z",records$lastname)#
records$firstname <- gsub("2","Z",records$firstname)#
#
# drop spaces before and at the end of strings#
library(stringr)#
records$firstname <- str_trim(records$firstname)#
records$lastname <- str_trim(records$lastname)#
#
# whenever more than one space appears, leave only one#
records$firstname <- gsub(" +", " ", records$firstname)#
records$lastname <- gsub(" +", " ", records$lastname)#
#
# whenever " I " appears, replace by "I"#
records$firstname <- gsub(" I ", "I", records$firstname)#
records$lastname <- gsub(" I ", "I", records$lastname)#
#
# whenever "I " appears at beginning of string, replace by "I"#
# gsub("^I ", "I", c("I HELD A","IM ELDA"))#
records$firstname <- gsub("^I ", "I", records$firstname)#
records$lastname <- gsub("^I ", "I", records$lastname)#
#
# whenever " I" appears at end of string, replace by "I"#
records$firstname <- gsub(" I$", "I", records$firstname)#
records$lastname <- gsub(" I$", "I", records$lastname)#
#
# replace " LOS " by " LOS", " LA " by " LA" (only drop space ahead)#
records$firstname <- gsub(" LOS ", " LOS", records$firstname)#
records$lastname <- gsub(" LOS ", " LOS", records$lastname)#
records$firstname <- gsub(" LA ", " LA", records$firstname)#
records$lastname <- gsub(" LA ", " LA", records$lastname)#
#
# replace "DE " by "DE", "DEL " by "DEL", "OE " by "DE", "OEL " by "DEL"#
records$firstname <- gsub(" DE ", " DE", records$firstname)#
records$lastname <- gsub(" DE ", " DE", records$lastname)#
records$firstname <- gsub(" DEL ", " DEL", records$firstname)#
records$lastname <- gsub(" DEL ", " DEL", records$lastname)#
records$firstname <- gsub(" OE ", " DE", records$firstname)#
records$lastname <- gsub(" OE ", " DE", records$lastname)#
records$firstname <- gsub(" OEL ", " DEL", records$firstname)#
records$lastname <- gsub(" OEL ", " DEL", records$lastname)#
# incase it appears at the beginning of the string#
records$firstname <- gsub("^DE ", "DE", records$firstname)#
records$lastname <- gsub("^DE ", "DE", records$lastname)#
records$firstname <- gsub("^DEL ", "DEL", records$firstname)#
records$lastname <- gsub("^DEL ", "DEL", records$lastname)#
records$firstname <- gsub("^OE ", "DE", records$firstname)#
records$lastname <- gsub("^OE ", "DE", records$lastname)#
records$firstname <- gsub("^OEL ", "DEL", records$firstname)#
records$lastname <- gsub("^OEL ", "DEL", records$lastname)#
## phonetic transformations#
if(TRUE){#
#
HispanicPhonetic <- function(namesvector){#
	# seseo#
	namesvector <- gsub("CI","SI",namesvector)#
	namesvector <- gsub("CE","SE",namesvector)#
	namesvector <- gsub("Z","S",namesvector)#
	namesvector <- gsub("SS","S",namesvector)#
#
	# V -> B#
	namesvector <- gsub("V","B",namesvector)#
#
	# some names with X#
	namesvector <- gsub("XABIER","JABIER",namesvector)#
	namesvector <- gsub("XIMENA","JIMENA",namesvector)#
#
	# GE -> JE, GI -> JI#
	namesvector <- gsub("GI","JI",namesvector)#
	namesvector <- gsub("GE","JE",namesvector)#
#
	# drop H except when preceded by C#
	namesvector <- gsub("CH","XZXZX",namesvector) # replace CH by some non-existent pattern#
	namesvector <- gsub("H","",namesvector) # drop all remaining Hs#
	namesvector <- gsub("XZXZX","CH",namesvector) # bring back the CHs#
#
	# Y at the end of words and before consonants -> I #
	namesvector <- gsub("Y ", "I ", namesvector)#
	namesvector <- gsub("Y$", "I", namesvector)#
	for(CONS in c("B","C","D","F","G","J","K","L","M","N","P","Q","R","S","T","V","W","X","Z")){#
		namesvector <- gsub(paste("Y",CONS,sep=""), paste("I",CONS,sep=""), namesvector)#
	}#
#
	# ye\'ismo#
	namesvector <- gsub("LL","Y",namesvector)#
	return(namesvector)#
}#
#
records$firstname <- HispanicPhonetic(records$firstname)#
records$lastname <- HispanicPhonetic(records$lastname)#
}#
#
records$dept <- factor(records$dept)#
#
## TODO: put this in a format with named columns#
#
sv_data <- cbind(records$firstname, records$lastname, records$dept, records$muni, records$month, records$day, records$year)#
colnames(sv_data) <- c("first_name", "last_name", "department", "muni", "bmonth", "bday", "byear")
setwd("~/Dropbox/sv-data")
records <- read.csv("records.csv",sep="|")#
matchHRDAG <- read.csv("matching-results.csv",sep="|")#
#
records <- records[records$dataset=="UN-TRC",]#records$dataset=="UN-TRC"|#
matchHRDAG <- matchHRDAG[matchHRDAG$dataset=="UN-TRC",]#
records$dataset <- NULL#
#
# drop fields that don't provide info#
records$dataset <- NULL#
records$sex <- NULL#
records$ismale  <- NULL#
records$isfemale <- NULL#
records$perp1  <- NULL#
records$perp2  <- NULL#
records$perp3  <- NULL#
records$perp4  <- NULL#
records$perpstr <- NULL#
records$dataset <- NULL#
records$newviol  <- NULL#
records$violation <- NULL#
records$perptr <- NULL#
records$newperp <- NULL#
records$placestr <- NULL#
records$date <- NULL#
#
# standardize NA#
records$year [records$year ==0] <- NA#
records$month  [records$month ==0] <- NA#
records$day [records$day ==0] <- NA#
records$muni [records$muni =="NOT FOUND"] <- NA#
records$firstname [records$firstname == ""] <- NA#
records$lastname [records$lastname == ""] <- NA#
#
records$fullname <- NULL#
#
# merge with the IDs from the DuDe run by Amelia Hoover Green - HRDAG#
records <- merge(records,matchHRDAG, by="record_id")#
#
# Keep only records containing first and last name, and department #
# Some groups of records without first name seem to correspond to families killed the same day, in the same place#
#
records <- records[!is.na(records$firstname),]#
records <- records[!is.na(records$lastname),]#
records <- records[records$dept!="Unknown",]#
#
# firstname and lastname shouldn't contain numbers#
# replace 0 by O, 3 and 8 by B, ! and 1 by I, 6 by G, 2 by Z#
#
records$lastname <- gsub("0","O",records$lastname)#
records$firstname <- gsub("0","O",records$firstname)#
records$lastname <- gsub("3","B",records$lastname)#
records$firstname <- gsub("3","B",records$firstname)#
records$lastname <- gsub("8","B",records$lastname)#
records$firstname <- gsub("8","B",records$firstname)#
records$lastname <- gsub("!","I",records$lastname)#
records$firstname <- gsub("!","I",records$firstname)#
records$lastname <- gsub("1","I",records$lastname)#
records$firstname <- gsub("1","I",records$firstname)#
records$lastname <- gsub("6","G",records$lastname)#
records$firstname <- gsub("6","G",records$firstname)#
records$lastname <- gsub("2","Z",records$lastname)#
records$firstname <- gsub("2","Z",records$firstname)#
#
# drop spaces before and at the end of strings#
library(stringr)#
records$firstname <- str_trim(records$firstname)#
records$lastname <- str_trim(records$lastname)#
#
# whenever more than one space appears, leave only one#
records$firstname <- gsub(" +", " ", records$firstname)#
records$lastname <- gsub(" +", " ", records$lastname)#
#
# whenever " I " appears, replace by "I"#
records$firstname <- gsub(" I ", "I", records$firstname)#
records$lastname <- gsub(" I ", "I", records$lastname)#
#
# whenever "I " appears at beginning of string, replace by "I"#
# gsub("^I ", "I", c("I HELD A","IM ELDA"))#
records$firstname <- gsub("^I ", "I", records$firstname)#
records$lastname <- gsub("^I ", "I", records$lastname)#
#
# whenever " I" appears at end of string, replace by "I"#
records$firstname <- gsub(" I$", "I", records$firstname)#
records$lastname <- gsub(" I$", "I", records$lastname)#
#
# replace " LOS " by " LOS", " LA " by " LA" (only drop space ahead)#
records$firstname <- gsub(" LOS ", " LOS", records$firstname)#
records$lastname <- gsub(" LOS ", " LOS", records$lastname)#
records$firstname <- gsub(" LA ", " LA", records$firstname)#
records$lastname <- gsub(" LA ", " LA", records$lastname)#
#
# replace "DE " by "DE", "DEL " by "DEL", "OE " by "DE", "OEL " by "DEL"#
records$firstname <- gsub(" DE ", " DE", records$firstname)#
records$lastname <- gsub(" DE ", " DE", records$lastname)#
records$firstname <- gsub(" DEL ", " DEL", records$firstname)#
records$lastname <- gsub(" DEL ", " DEL", records$lastname)#
records$firstname <- gsub(" OE ", " DE", records$firstname)#
records$lastname <- gsub(" OE ", " DE", records$lastname)#
records$firstname <- gsub(" OEL ", " DEL", records$firstname)#
records$lastname <- gsub(" OEL ", " DEL", records$lastname)#
# incase it appears at the beginning of the string#
records$firstname <- gsub("^DE ", "DE", records$firstname)#
records$lastname <- gsub("^DE ", "DE", records$lastname)#
records$firstname <- gsub("^DEL ", "DEL", records$firstname)#
records$lastname <- gsub("^DEL ", "DEL", records$lastname)#
records$firstname <- gsub("^OE ", "DE", records$firstname)#
records$lastname <- gsub("^OE ", "DE", records$lastname)#
records$firstname <- gsub("^OEL ", "DEL", records$firstname)#
records$lastname <- gsub("^OEL ", "DEL", records$lastname)#
## phonetic transformations#
if(TRUE){#
#
HispanicPhonetic <- function(namesvector){#
	# seseo#
	namesvector <- gsub("CI","SI",namesvector)#
	namesvector <- gsub("CE","SE",namesvector)#
	namesvector <- gsub("Z","S",namesvector)#
	namesvector <- gsub("SS","S",namesvector)#
#
	# V -> B#
	namesvector <- gsub("V","B",namesvector)#
#
	# some names with X#
	namesvector <- gsub("XABIER","JABIER",namesvector)#
	namesvector <- gsub("XIMENA","JIMENA",namesvector)#
#
	# GE -> JE, GI -> JI#
	namesvector <- gsub("GI","JI",namesvector)#
	namesvector <- gsub("GE","JE",namesvector)#
#
	# drop H except when preceded by C#
	namesvector <- gsub("CH","XZXZX",namesvector) # replace CH by some non-existent pattern#
	namesvector <- gsub("H","",namesvector) # drop all remaining Hs#
	namesvector <- gsub("XZXZX","CH",namesvector) # bring back the CHs#
#
	# Y at the end of words and before consonants -> I #
	namesvector <- gsub("Y ", "I ", namesvector)#
	namesvector <- gsub("Y$", "I", namesvector)#
	for(CONS in c("B","C","D","F","G","J","K","L","M","N","P","Q","R","S","T","V","W","X","Z")){#
		namesvector <- gsub(paste("Y",CONS,sep=""), paste("I",CONS,sep=""), namesvector)#
	}#
#
	# ye\'ismo#
	namesvector <- gsub("LL","Y",namesvector)#
	return(namesvector)#
}#
#
records$firstname <- HispanicPhonetic(records$firstname)#
records$lastname <- HispanicPhonetic(records$lastname)#
}#
#
records$dept <- factor(records$dept)#
#
## TODO: put this in a format with named columns#
#
sv_data <- cbind(records$firstname, records$lastname, records$dept, records$muni, records$month, records$day, records$year)#
colnames(sv_data) <- c("first_name", "last_name", "department", "muni", "bmonth", "bday", "byear")
sv_data
head(sv_data)
head(records)
records <- read.csv("records.csv",sep="|")#
matchHRDAG <- read.csv("matching-results.csv",sep="|")
head(records)
head(matchHRDAG)
records <- records[records$dataset=="UN-TRC",]
head(records)
matchHRDAG <- matchHRDAG[matchHRDAG$dataset=="UN-TRC",]
head(matchHRDAG)
records$dataset <- NULL#
#
# drop fields that don't provide info#
records$dataset <- NULL#
records$sex <- NULL#
records$ismale  <- NULL#
records$isfemale <- NULL#
records$perp1  <- NULL#
records$perp2  <- NULL#
records$perp3  <- NULL#
records$perp4  <- NULL#
records$perpstr <- NULL#
records$dataset <- NULL#
records$newviol  <- NULL#
records$violation <- NULL#
records$perptr <- NULL#
records$newperp <- NULL#
records$placestr <- NULL#
records$date <- NULL#
#
# standardize NA#
records$year [records$year ==0] <- NA#
records$month  [records$month ==0] <- NA#
records$day [records$day ==0] <- NA#
records$muni [records$muni =="NOT FOUND"] <- NA#
records$firstname [records$firstname == ""] <- NA#
records$lastname [records$lastname == ""] <- NA#
#
records$fullname <- NULL
records <- merge(records,matchHRDAG, by="record_id")
head(records)
records <- records[!is.na(records$firstname),]#
records <- records[!is.na(records$lastname),]#
records <- records[records$dept!="Unknown",]#
#
# firstname and lastname shouldn't contain numbers#
# replace 0 by O, 3 and 8 by B, ! and 1 by I, 6 by G, 2 by Z#
#
records$lastname <- gsub("0","O",records$lastname)#
records$firstname <- gsub("0","O",records$firstname)#
records$lastname <- gsub("3","B",records$lastname)#
records$firstname <- gsub("3","B",records$firstname)#
records$lastname <- gsub("8","B",records$lastname)#
records$firstname <- gsub("8","B",records$firstname)#
records$lastname <- gsub("!","I",records$lastname)#
records$firstname <- gsub("!","I",records$firstname)#
records$lastname <- gsub("1","I",records$lastname)#
records$firstname <- gsub("1","I",records$firstname)#
records$lastname <- gsub("6","G",records$lastname)#
records$firstname <- gsub("6","G",records$firstname)#
records$lastname <- gsub("2","Z",records$lastname)#
records$firstname <- gsub("2","Z",records$firstname)#
#
# drop spaces before and at the end of strings#
library(stringr)#
records$firstname <- str_trim(records$firstname)#
records$lastname <- str_trim(records$lastname)#
#
# whenever more than one space appears, leave only one#
records$firstname <- gsub(" +", " ", records$firstname)#
records$lastname <- gsub(" +", " ", records$lastname)#
#
# whenever " I " appears, replace by "I"#
records$firstname <- gsub(" I ", "I", records$firstname)#
records$lastname <- gsub(" I ", "I", records$lastname)#
#
# whenever "I " appears at beginning of string, replace by "I"#
# gsub("^I ", "I", c("I HELD A","IM ELDA"))#
records$firstname <- gsub("^I ", "I", records$firstname)#
records$lastname <- gsub("^I ", "I", records$lastname)#
#
# whenever " I" appears at end of string, replace by "I"#
records$firstname <- gsub(" I$", "I", records$firstname)#
records$lastname <- gsub(" I$", "I", records$lastname)#
#
# replace " LOS " by " LOS", " LA " by " LA" (only drop space ahead)#
records$firstname <- gsub(" LOS ", " LOS", records$firstname)#
records$lastname <- gsub(" LOS ", " LOS", records$lastname)#
records$firstname <- gsub(" LA ", " LA", records$firstname)#
records$lastname <- gsub(" LA ", " LA", records$lastname)#
#
# replace "DE " by "DE", "DEL " by "DEL", "OE " by "DE", "OEL " by "DEL"#
records$firstname <- gsub(" DE ", " DE", records$firstname)#
records$lastname <- gsub(" DE ", " DE", records$lastname)#
records$firstname <- gsub(" DEL ", " DEL", records$firstname)#
records$lastname <- gsub(" DEL ", " DEL", records$lastname)#
records$firstname <- gsub(" OE ", " DE", records$firstname)#
records$lastname <- gsub(" OE ", " DE", records$lastname)#
records$firstname <- gsub(" OEL ", " DEL", records$firstname)#
records$lastname <- gsub(" OEL ", " DEL", records$lastname)#
# incase it appears at the beginning of the string#
records$firstname <- gsub("^DE ", "DE", records$firstname)#
records$lastname <- gsub("^DE ", "DE", records$lastname)#
records$firstname <- gsub("^DEL ", "DEL", records$firstname)#
records$lastname <- gsub("^DEL ", "DEL", records$lastname)#
records$firstname <- gsub("^OE ", "DE", records$firstname)#
records$lastname <- gsub("^OE ", "DE", records$lastname)#
records$firstname <- gsub("^OEL ", "DEL", records$firstname)#
records$lastname <- gsub("^OEL ", "DEL", records$lastname)#
## phonetic transformations#
if(TRUE){#
#
HispanicPhonetic <- function(namesvector){#
	# seseo#
	namesvector <- gsub("CI","SI",namesvector)#
	namesvector <- gsub("CE","SE",namesvector)#
	namesvector <- gsub("Z","S",namesvector)#
	namesvector <- gsub("SS","S",namesvector)#
#
	# V -> B#
	namesvector <- gsub("V","B",namesvector)#
#
	# some names with X#
	namesvector <- gsub("XABIER","JABIER",namesvector)#
	namesvector <- gsub("XIMENA","JIMENA",namesvector)#
#
	# GE -> JE, GI -> JI#
	namesvector <- gsub("GI","JI",namesvector)#
	namesvector <- gsub("GE","JE",namesvector)#
#
	# drop H except when preceded by C#
	namesvector <- gsub("CH","XZXZX",namesvector) # replace CH by some non-existent pattern#
	namesvector <- gsub("H","",namesvector) # drop all remaining Hs#
	namesvector <- gsub("XZXZX","CH",namesvector) # bring back the CHs#
#
	# Y at the end of words and before consonants -> I #
	namesvector <- gsub("Y ", "I ", namesvector)#
	namesvector <- gsub("Y$", "I", namesvector)#
	for(CONS in c("B","C","D","F","G","J","K","L","M","N","P","Q","R","S","T","V","W","X","Z")){#
		namesvector <- gsub(paste("Y",CONS,sep=""), paste("I",CONS,sep=""), namesvector)#
	}#
#
	# ye\'ismo#
	namesvector <- gsub("LL","Y",namesvector)#
	return(namesvector)#
}#
#
records$firstname <- HispanicPhonetic(records$firstname)#
records$lastname <- HispanicPhonetic(records$lastname)#
}#
#
records$dept <- factor(records$dept)
sv_data <- cbind(records$firstname, records$lastname, records$dept, records$muni, records$month, records$day, records$year)#
colnames(sv_data) <- c("first_name", "last_name", "department", "muni", "bmonth", "bday", "byear")
head(sv_data)
head(records)
dim(records)
dim(sv_data)
9*4
36+25
9*5
25+45
75/2
rowSums(mydtm)
library(tm)#
load(file="docs.Rdata")#
#
corp = VCorpus(VectorSource(docs))#
dtm = DocumentTermMatrix(corp, control=list(tolower=TRUE,#
removePunctuation=TRUE,removeNumbers=TRUE))
setwd("~/work_on/teaching/data-mine/lectures_2018/02-ir")
library(tm)#
load(file="docs.Rdata")#
#
corp = VCorpus(VectorSource(docs))#
dtm = DocumentTermMatrix(corp, control=list(tolower=TRUE,#
removePunctuation=TRUE,removeNumbers=TRUE))
mydtm = as.matrix(dtm)
rowSums(mydtm)
table(mydtm)
D = nrow(mydtm)
D
nw = colSums(mydtm!=0)
nw
a = mydtm/rowSums(mydtm)
head(a)
aa = scale(a,center=FALSE,scale=1/log(D/nw))
head(aa)
nw = colSums(mydtm!=0)
mydtm.idf.dl = scale(mydtm.dl,center=FALSE,scale=1/log(9/nw))
